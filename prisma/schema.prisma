// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

//datasource db {
 // provider          = "mysql"
 // url               = env("DATABASE_URL")
 // shadowDatabaseUrl = env("DATABASE_MIGRATE_URL")
 // relationMode      = "prisma"
//}

datasource db {
  provider = "postgresql"
 // url   = "postgresql://user:password@localhost:5432/edwind_local"
  url   = env("DATABASE_URL")
}




model User {
  id                 String            @id @default(cuid())
  name               String?
  email              String?           @unique
  emailVerified      DateTime?         @map("email_verified")
  image              String?
  accounts           Account[]
  sessions           Session[]
  username           String?           @unique
  password           String
  firstName          String
  midName            String?
  lastName           String
  status             String            @default("active")
  info               Json //@default({ "bio": "", "phone": "" })
  createdAt          DateTime          @default(now())
  updatedAt          DateTime?         @updatedAt
  sub_organization   sub_organizations @relation(fields: [sub_organizationId], references: [id], onDelete: Cascade)
  sub_organizationId Int
  projects           projects[]

  @@index([sub_organizationId])
  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model organizations {
  id                String              @id @default(uuid()) // This field will be a UUID
  title             String
  description       String?
  createdAt         DateTime            @default(now())
  lastUpdated       DateTime            @default(now())
  updatedby         String
  createdBy         String
  info              Json? // includes{contact_person:'',email:'',phone:'',address:'',industry:'',website:'',tax_id:'' }
  logo_url          String?
  status            String?
  type              String?
  notes             String?
  published         Boolean
  sub_organizations sub_organizations[]
}

model sub_organizations {
  id             Int           @id @default(autoincrement())
  title          String
  description    String?
  createdAt      DateTime      @default(now())
  lastUpdated    DateTime      @default(now())
  updatedby      String
  createdBy      String
  users          User[]
  projects       projects[]
  organization   organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String        @unique
  courses        courses[]
  course_tags    course_tags[]
}

model roles {
  id                 Int            @id @default(autoincrement())
  title              String
  sub_organizationId Int
  course_roles       course_roles[]
}

model course_roles {
  id         Int     @id @default(autoincrement())
  roleId     Int
  role       roles   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  courseId   Int
  courseInfo courses @relation(fields: [courseId], references: [id])

  @@index([roleId])
  @@index([courseId])
}

model projects {
  id                  Int                    @id @default(autoincrement())
  cuid                String
  sub_organizationId  Int                    
  sub_organization    sub_organizations      @relation(fields: [sub_organizationId], references: [id])
  createdAt           DateTime               @default(now())
  lastUpdated         DateTime               @default(now())
  updatedby           String?
  CreatedBy           String
  published           Boolean                @default(false)
  title               String
  summary             String?                @db.VarChar(1000)
  duration            Int?
  tags                Json?
  projectType         String?
  projectCategory     String?
  projectStatus       String
  startDate           DateTime?
  endDate             DateTime?
  backgroundImg       String?
  color               String?
  language            String                 @default("english")
  location            Json?
  participants        project_participants[]
  groups              groups[]
  events              events[]
  user                User                   @relation(fields: [CreatedBy], references: [id])
  project_curriculums project_curriculums[]

  @@index([CreatedBy])
  @@index([sub_organizationId])
}

model participants {
  id                  String                 @id @default(uuid())
  firstName           String
  middleName          String?
  lastName            String
  email               String                 @unique
  participantStatus   String?
  participantType     String?
  sub_organization    Int
  derpartement        String?
  roleId              String
  notes               String?
  profilePrefs        Json
  profileImg          String?
  credentials         Json
  createdAt           DateTime               @default(now())
  lastUpdated         DateTime?              @default(now())
  updatedby           String? // Remove nullability when activating users
  createdBy           String? // Remove nullability when activating users
  projects            project_participants[]
  activities_progress activities_progress[]
  modules_progress    modules_progress[]
}

model project_curriculums {
  id                             Int                              @id @default(autoincrement())
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime                         @default(now())
  projectId                      Int
  project                        projects                         @relation(fields: [projectId], references: [id])
  curriculumId                   Int                              @unique
  curriculum                     curriculums                      @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  curriculums_enrollees_progress curriculums_enrollees_progress[]

  @@index([curriculumId])
  @@index([projectId])
}

model project_participants {
  id                             Int                              @id @default(autoincrement())
  project                        projects                         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId                      Int
  participant                    participants                     @relation(fields: [participantId], references: [id], onDelete: Cascade)
  participantId                  String
  event_attendees                event_attendees[]
  group                          group_participants[]
  curriculums_enrollees_progress curriculums_enrollees_progress[]
  courses_enrollee_progress      courses_enrollee_progress[]

  @@unique([projectId, participantId])
  @@index([projectId])
  @@index([participantId])
}

model learners_progress {
  id            Int     @id @default(autoincrement())
  participantId String
  courseId      Int
  completed     Boolean
  projectId     Int
}

model groups {
  id           Int                  @id @default(autoincrement())
  groupName    String
  project      projects             @relation(fields: [projectId], references: [id])
  projectId    Int
  chipColor    String
  participants group_participants[]
  event_groups event_groups[]

  @@index([projectId])
}

model group_participants {
  id            Int                  @id @default(autoincrement())
  group         groups               @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId       Int
  participant   project_participants @relation(fields: [participantId], references: [id], onDelete: Cascade)
  participantId Int

  @@unique([groupId, participantId]) // Enforce uniqueness for each participant within a group
  @@index([groupId])
  @@index([participantId])
}

model tags {
  id          Int           @id @default(autoincrement())
  title       String
  course_tags course_tags[]
  module_tags module_tags[]
}

model course_tags {
  id                   Int               @id @default(autoincrement())
  courseId             Int
  courseInfo           courses           @relation(fields: [courseId], references: [id])
  tagId                Int
  TagInfo              tags              @relation(fields: [tagId], references: [id])
  sub_organizationId   Int
  sub_organizationInfo sub_organizations @relation(fields: [sub_organizationId], references: [id])

  @@index([sub_organizationId])
  @@index([tagId])
  @@index([courseId])
}

model module_tags {
  id         Int     @id @default(autoincrement())
  moduleId   Int
  moduleInfo modules @relation(fields: [moduleId], references: [id])
  tagId      Int
  TagInfo    tags    @relation(fields: [tagId], references: [id])

  @@index([tagId])
  @@index([moduleId])
}

model courses {
  id                        Int                         @id @default(autoincrement())
  cuid                      String                      @default(cuid())
  sub_organizationId        Int
  sub_organizationInfo      sub_organizations           @relation(fields: [sub_organizationId], references: [id])
  createdAt                 DateTime?                   @default(now())
  createdBy                 String
  lastUpdated               DateTime?                   @updatedAt
  published                 Boolean?
  title                     String
  summary                   String?
  language                  String?
  deliveryMethod            String?
  goLiveDate                DateTime?
  maxParticipants           Int?
  deadline                  DateTime?
  duration                  Int?
  cost                      Float?
  level                     String?
  accessRestrictions        String?
  certification             String?
  tags                      String?
  CourseType                String?
  courseCategory            String?
  courseStatus              String?
  targetAudience            String?
  isMandatoryToAllRole      Boolean                     @default(false)
  backgroundImg             String?
  resources                 String?
  syllabusId                Int?
  JSONSyllabus              Json?
  rating                    Float?
  code                      String?
  version                   String?
  modules                   modules[]
  events                    events[]
  curriculum_courses        curriculum_courses[]
  course_tags               course_tags[]
  course_roles              course_roles[]
  courses_enrollee_progress courses_enrollee_progress[]

  @@index([sub_organizationId])
}

model courses_enrollee_progress {
  id          Int                  @id @default(autoincrement())
  courseId    Int
  course      courses              @relation(fields: [courseId], references: [id])
  enrolleeId  Int
  enrollee    project_participants @relation(fields: [enrolleeId], references: [id])
  completed   Boolean              @default(false)
  createdAt   DateTime             @default(now())
  lastUpdated DateTime             @default(now())
  updatedby   String?
  createdBy   String?

  @@unique([courseId, completed, enrolleeId])
  @@index([courseId])
  @@index([enrolleeId])
}

model modules {
  id               Int                @id @default(autoincrement())
  createdAt        DateTime           @default(now())
  lastUpdated      DateTime           @updatedAt
  published        Boolean
  title            String
  summary          String?
  content          String?
  JSONContent      Json?
  duration         Int?
  moduleStatus     String?
  backgroundImg    String?
  courseId         Int
  course           courses            @relation(fields: [courseId], references: [id])
  activities       activities[]
  moduleOrder      Int?
  module_tags      module_tags[]
  modules_progress modules_progress[]

  @@index([courseId])
}

model modules_progress {
  id          Int          @id @default(autoincrement())
  moduleId    Int
  module      modules      @relation(fields: [moduleId], references: [id])
  learnerId   String
  learner     participants @relation(fields: [learnerId], references: [id])
  completed   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  lastUpdated DateTime     @default(now())
  updatedby   String?
  createdBy   String?

  @@unique([moduleId, completed, learnerId])
  @@index([moduleId])
  @@index([learnerId])
}

model curriculums_enrollees_progress {
  id           Int                  @id @default(autoincrement())
  enrollee     project_participants @relation(fields: [enrolleeId], references: [id])
  enrolleeId   Int
  curriculum   project_curriculums  @relation(fields: [curriculumId], references: [id])
  curriculumId Int
  completed    Boolean              @default(false)

  @@unique([enrolleeId, curriculumId])
  @@index([curriculumId])
}

model curriculums {
  id                  Int                   @id @default(autoincrement())
  cuid                String                @default(cuid())
  title               String
  description         String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())
  project_curriculums project_curriculums[]
  curriculum_courses  curriculum_courses[]
}

model curriculum_courses {
  id           Int         @id @default(autoincrement())
  curriculumId Int
  currculum    curriculums @relation(fields: [curriculumId], references: [id])
  courseId     Int
  course       courses     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([curriculumId])
  @@index([courseId])
}

model activities {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now())
  lastUpdated         DateTime              @default(now())
  published           Boolean
  title               String
  summary             String?
  content             String?
  duration            Int?
  activityType        String?
  activityCategory    String?
  activityStatus      String?
  backgroundImg       String?
  moduleId            Int
  module              modules               @relation(fields: [moduleId], references: [id])
  ActivityOrder       Int?
  activities_progress activities_progress[]

  @@index([moduleId])
}

model activities_progress {
  id          Int          @id @default(autoincrement())
  activitieId Int
  activity    activities   @relation(fields: [activitieId], references: [id])
  learnerId   String
  learner     participants @relation(fields: [learnerId], references: [id])
  completed   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  lastUpdated DateTime     @default(now())
  updatedby   String?
  createdBy   String?

  @@unique([activitieId, completed, learnerId])
  @@index([activitieId])
  @@index([learnerId])
}

model events {
  id              Int               @id @default(autoincrement())
  title           String
  description     String?
  eventType       String?
  event_attendees event_attendees[] // Use plural for relations
  project         projects          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       Int
  course          courses?          @relation(fields: [courseId], references: [id])
  courseId        Int? // Use optional for nullable fields
  start           DateTime // Standard FullCalendar start date and time
  end             DateTime // Standard FullCalendar end date and time
  allDay          Boolean // Indicates if the event is an all-day event
  color           String? // Background color of the event
  textColor       String? // Color of the event text
  backgroundColor String?           @default("#4287f5")
  borderColor     String? // Border color of the event
  editable        Boolean? // Specifies if the event can be edited
  eventStatus     String?
  extendedProps   Json? // extendedProps: { location: 'Conference Room A', priority: 'High' }
  event_groups    event_groups[]

  @@index([projectId])
  @@index([courseId])
}

model event_attendees {
  id                Int                  @id @default(autoincrement())
  event             events               @relation(fields: [eventsId], references: [id], onDelete: Cascade)
  eventsId          Int
  attendance_status String               @default("scheduled")
  enrollee          project_participants @relation(fields: [enrolleeId], references: [id])
  enrolleeId        Int
  createdAt         DateTime             @default(now())
  lastUpdated       DateTime             @default(now())
  updatedby         String?
  createdBy         String?

  @@unique([enrolleeId])
  @@index([eventsId])
}

model event_groups {
  id       Int    @id @default(autoincrement())
  event    events @relation(fields: [eventsId], references: [id], onDelete: Cascade)
  eventsId Int
  groupId  Int
  groups   groups @relation(fields: [groupId], references: [id])

  @@unique([groupId])
  @@index([eventsId])
}
