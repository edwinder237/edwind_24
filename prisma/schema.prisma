generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String            @id @default(cuid())
  name               String?
  email              String?           @unique
  emailVerified      DateTime?         @map("email_verified")
  image              String?
  username           String?           @unique
  password           String
  firstName          String
  midName            String?
  lastName           String
  status             String            @default("active")
  info               Json
  createdAt          DateTime          @default(now())
  updatedAt          DateTime?         @updatedAt
  sub_organizationId Int
  projects           projects[]
  sub_organization   sub_organizations @relation(fields: [sub_organizationId], references: [id], onDelete: Cascade)

  @@index([sub_organizationId])
  @@map("users")
}

model organizations {
  id                String             @id @default(uuid())
  title             String
  description       String?
  createdAt         DateTime           @default(now())
  lastUpdated       DateTime           @default(now())
  updatedby         String
  createdBy         String
  info              Json?
  logo_url          String?
  status            String?
  type              String?
  notes             String?
  published         Boolean
  sub_organizations sub_organizations?
}

model sub_organizations {
  id                  Int                                 @id @default(autoincrement())
  title               String
  description         String?
  createdAt           DateTime                            @default(now())
  lastUpdated         DateTime                            @default(now())
  updatedby           String
  createdBy           String
  organizationId      String                              @unique
  course_tags         course_tags[]
  courses             courses[]
  instructors         instructors[]
  projects            projects[]
  participant_roles   sub_organization_participant_role[]
  organization        organizations                       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  topics              topics[]
  training_recipients training_recipients[]
  users               User[]
}

model sub_organization_participant_role {
  id                       Int                        @id @default(autoincrement())
  title                    String
  description              String?
  sub_organizationId       Int
  isActive                 Boolean                    @default(true)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  createdBy                String
  updatedBy                String?
  course_participant_roles course_participant_roles[]
  module_participant_roles module_participant_roles[]
  participants             participants[]
  sub_organization         sub_organizations          @relation(fields: [sub_organizationId], references: [id], onDelete: Cascade)

  @@unique([title, sub_organizationId], name: "unique_role_per_organization")
  @@index([sub_organizationId])
  @@index([title])
  @@index([isActive])
}

model training_recipients {
  id                 Int               @id @default(autoincrement())
  name               String
  description        String?
  contactPerson      String?
  email              String?
  phone              String?
  address            String?
  website            String?
  industry           String?
  taxId              String?
  notes              String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  createdBy          String
  updatedBy          String?
  sub_organizationId Int
  participants       participants[]
  projects           projects[]
  sub_organization   sub_organizations @relation(fields: [sub_organizationId], references: [id], onDelete: Cascade)

  @@index([sub_organizationId])
}

model projects {
  id                                 Int                                           @id @default(autoincrement())
  cuid                               String
  sub_organizationId                 Int
  createdAt                          DateTime                                      @default(now())
  lastUpdated                        DateTime                                      @default(now())
  updatedby                          String?
  CreatedBy                          String
  published                          Boolean                                       @default(false)
  title                              String
  summary                            String?                                       @db.VarChar(1000)
  duration                           Int?
  tags                               Json?
  projectType                        String?
  projectCategory                    String?
  projectStatus                      String
  startDate                          DateTime?
  endDate                            DateTime?
  backgroundImg                      String?
  color                              String?
  language                           String                                        @default("English")
  location                           Json?
  trainingRecipientId                Int?
  daily_focus                        daily_focus[]
  events                             events[]
  groups                             groups[]
  checklist_progress                 project_course_checklist_progress[]
  participant_checklist_progress     project_participants_course_checklist_progress[]
  project_curriculums                project_curriculums[]
  project_instructors                project_instructors[]
  participants                       project_participants[]
  project_settings                   project_settings?
  project_topics                     project_topics[]
  user                               User                                          @relation(fields: [CreatedBy], references: [id])
  sub_organization                   sub_organizations                             @relation(fields: [sub_organizationId], references: [id])
  training_recipient                 training_recipients?                          @relation(fields: [trainingRecipientId], references: [id])
  training_plans                     training_plans[]

  @@index([CreatedBy])
  @@index([sub_organizationId])
  @@index([trainingRecipientId])
}

model instructors {
  id                  Int                   @id @default(autoincrement())
  firstName           String
  lastName            String
  email               String                @unique
  phone               String?
  bio                 String?
  expertise           String[]
  instructorType      String                @default("main")
  status              String                @default("active")
  profileImage        String?
  qualifications      Json?
  hourlyRate          Float?
  availability        Json?
  sub_organizationId  Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  createdBy           String
  updatedBy           String?
  course_instructors  course_instructors[]
  event_instructors   event_instructors[]
  sub_organization    sub_organizations     @relation(fields: [sub_organizationId], references: [id], onDelete: Cascade)
  project_instructors project_instructors[]

  @@index([sub_organizationId])
  @@index([instructorType])
  @@index([status])
}

model project_instructors {
  id             Int         @id @default(autoincrement())
  projectId      Int
  instructorId   Int
  instructorType String      @default("main")
  createdAt      DateTime    @default(now())
  lastUpdated    DateTime    @default(now())
  instructor     instructors @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  project        projects    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, instructorId], name: "projectId_instructorId")
  @@index([projectId])
  @@index([instructorId])
}

model project_settings {
  id             Int       @id @default(autoincrement())
  projectId      Int       @unique
  startDate      DateTime?
  endDate        DateTime?
  startOfDayTime String    @default("09:00")
  endOfDayTime   String    @default("17:00")
  lunchTime      String?   @default("12:00-13:00")
  timezone       String    @default("UTC")
  workingDays    String[]  @default(["monday", "tuesday", "wednesday", "thursday", "friday"])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      String
  updatedBy      String?
  project        projects  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model participants {
  id                  String                             @id @default(uuid())
  firstName           String
  middleName          String?
  lastName            String
  email               String                             @unique
  participantStatus   String?
  participantType     String?
  sub_organization    Int
  trainingRecipientId Int?
  derpartement        String?
  roleId              Int?
  notes               String?
  profilePrefs        Json
  profileImg          String?
  credentials         Json
  createdAt           DateTime                           @default(now())
  lastUpdated         DateTime?                          @default(now())
  updatedby           String?
  createdBy           String?
  role                sub_organization_participant_role? @relation(fields: [roleId], references: [id])
  training_recipient  training_recipients?               @relation(fields: [trainingRecipientId], references: [id])
  projects            project_participants[]
  toolAccesses        toolAccesses[]

  @@index([trainingRecipientId])
  @@index([roleId])
}

model project_curriculums {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
  projectId    Int
  curriculumId Int
  curriculum   curriculums @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  project      projects    @relation(fields: [projectId], references: [id])

  @@unique([projectId, curriculumId], name: "projectId_curriculumId")
  @@index([curriculumId])
  @@index([projectId])
}

model project_participants {
  id                                  Int                                           @id @default(autoincrement())
  projectId                           Int
  participantId                       String
  status                              String                                        @default("active")
  courses_enrollee_progress           courses_enrollee_progress[]
  event_attendees                     event_attendees[]
  group                               group_participants[]
  checklist_progress                  project_participants_course_checklist_progress[]
  participant                         participants                                  @relation(fields: [participantId], references: [id], onDelete: Cascade)
  project                             projects                                      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, participantId])
  @@index([projectId])
  @@index([participantId])
}

model groups {
  id                Int                  @id @default(autoincrement())
  groupName         String
  projectId         Int
  chipColor         String
  event_groups      event_groups[]
  group_curriculums group_curriculums[]
  participants      group_participants[]
  project           projects             @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model group_participants {
  id            Int                  @id @default(autoincrement())
  groupId       Int
  participantId Int
  group         groups               @relation(fields: [groupId], references: [id], onDelete: Cascade)
  participant   project_participants @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([groupId, participantId])
  @@index([groupId])
  @@index([participantId])
}

model tags {
  id          Int           @id @default(autoincrement())
  title       String
  course_tags course_tags[]
}

model course_tags {
  id                   Int               @id @default(autoincrement())
  courseId             Int
  tagId                Int
  sub_organizationId   Int
  courseInfo           courses           @relation(fields: [courseId], references: [id])
  sub_organizationInfo sub_organizations @relation(fields: [sub_organizationId], references: [id])
  TagInfo              tags              @relation(fields: [tagId], references: [id])

  @@index([sub_organizationId])
  @@index([tagId])
  @@index([courseId])
}

model courses {
  id                        Int                         @id @default(autoincrement())
  cuid                      String                      @default(cuid())
  sub_organizationId        Int
  createdAt                 DateTime?                   @default(now())
  createdBy                 String
  lastUpdated               DateTime?                   @updatedAt
  published                 Boolean?
  title                     String
  summary                   String?
  language                  String?
  deliveryMethod            String?
  goLiveDate                DateTime?
  maxParticipants           Int?
  deadline                  DateTime?
  duration                  Int?
  cost                      Float?
  level                     String?
  accessRestrictions        String?
  certification             String?
  tags                      String?
  CourseType                String?
  courseCategory            String?
  courseStatus              String?
  isActive                  Boolean                     @default(true)
  targetAudience            String?
  isMandatoryToAllRole      Boolean                     @default(false)
  backgroundImg             String?
  resources                 String?
  syllabusId                Int?
  JSONSyllabus              Json?
  rating                    Float?
  code                      String?
  version                   String?
  course_checklist_items    course_checklist_items[]
  course_instructors        course_instructors[]
  course_objectives         course_objectives[]
  course_participant_roles  course_participant_roles[]
  course_tags               course_tags[]
  course_topics             course_topics[]
  sub_organizationInfo      sub_organizations           @relation(fields: [sub_organizationId], references: [id])
  courses_enrollee_progress courses_enrollee_progress[]
  curriculum_courses        curriculum_courses[]
  events                    events[]
  modules                   modules[]
  training_plan_modules     training_plan_modules[]

  @@index([sub_organizationId])
  @@index([isActive])
}

model courses_enrollee_progress {
  id          Int                  @id @default(autoincrement())
  courseId    Int
  enrolleeId  Int
  completed   Boolean              @default(false)
  createdAt   DateTime             @default(now())
  lastUpdated DateTime             @default(now())
  updatedby   String?
  createdBy   String?
  course      courses              @relation(fields: [courseId], references: [id])
  enrollee    project_participants @relation(fields: [enrolleeId], references: [id])

  @@unique([courseId, completed, enrolleeId])
  @@index([courseId])
  @@index([enrolleeId])
}

model modules {
  id                       Int                        @id @default(autoincrement())
  createdAt                DateTime                   @default(now())
  lastUpdated              DateTime                   @updatedAt
  published                Boolean
  title                    String
  summary                  String?
  content                  String?
  JSONContent              Json?
  duration                 Int?
  customDuration           Int?
  level                    String?
  moduleStatus             String?
  backgroundImg            String?
  courseId                 Int
  moduleOrder              Int?
  activities               activities[]
  course_checklist_items   course_checklist_items[]
  module_objectives        module_objectives[]
  module_participant_roles module_participant_roles[]
  event_module_progress    event_module_progress[]
  course                   courses                    @relation(fields: [courseId], references: [id])
  training_plan_modules    training_plan_modules[]

  @@index([courseId])
}

model curriculums {
  id                  Int                   @id @default(autoincrement())
  cuid                String                @default(cuid())
  title               String
  description         String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now())
  curriculum_courses  curriculum_courses[]
  group_curriculums   group_curriculums[]
  project_curriculums project_curriculums[]
  supportActivities   supportActivities[]
  training_plans      training_plans[]
}

model curriculum_courses {
  id           Int         @id @default(autoincrement())
  curriculumId Int
  courseId     Int
  course       courses     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  currculum    curriculums @relation(fields: [curriculumId], references: [id])

  @@index([curriculumId])
  @@index([courseId])
}

model activities {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  lastUpdated       DateTime            @default(now())
  published         Boolean
  title             String
  summary           String?
  content           String?
  contentUrl        String?             @default("")
  duration          Int?
  activityType      String?
  activityCategory  String?
  activityStatus    String?
  backgroundImg     String?
  moduleId          Int
  ActivityOrder     Int?
  module                    modules                     @relation(fields: [moduleId], references: [id])
  event_activity_progress   event_activity_progress[]

  @@index([moduleId])
}

model events {
  id                Int                 @id @default(autoincrement())
  title             String
  description       String?
  eventType         String?
  projectId         Int
  courseId          Int?
  supportActivityId Int?
  start             DateTime
  end               DateTime
  allDay            Boolean
  color             String?
  textColor         String?
  backgroundColor   String?             @default("#4287f5")
  borderColor       String?
  editable          Boolean?
  eventStatus       String?
  extendedProps     Json?
  event_activity_progress event_activity_progress[]
  event_attendees         event_attendees[]
  event_groups            event_groups[]
  event_instructors       event_instructors[]
  course                  courses?                    @relation(fields: [courseId], references: [id])
  project                 projects                    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  supportActivity         supportActivities?          @relation(fields: [supportActivityId], references: [id])
  event_module_progress   event_module_progress[]

  @@index([projectId])
  @@index([courseId])
  @@index([supportActivityId])
}

model event_attendees {
  id                Int                  @id @default(autoincrement())
  eventsId          Int
  attendance_status String               @default("scheduled")
  enrolleeId        Int
  groupId           Int?                 // NEW
  createdAt         DateTime             @default(now())
  lastUpdated       DateTime             @default(now())
  updatedby         String?
  createdBy         String?
  enrollee          project_participants @relation(fields: [enrolleeId], references: [id])
  event             events               @relation(fields: [eventsId], references: [id], onDelete: Cascade)

  @@unique([eventsId, enrolleeId])
  @@index([eventsId])
  @@index([enrolleeId])
  @@index([groupId])
}

model event_groups {
  id       Int    @id @default(autoincrement())
  eventsId Int
  groupId  Int
  event    events @relation(fields: [eventsId], references: [id], onDelete: Cascade)
  groups   groups @relation(fields: [groupId], references: [id])

  @@unique([eventsId, groupId])
  @@index([eventsId])
  @@index([groupId])
}

model daily_focus {
  id        Int      @id @default(autoincrement())
  date      DateTime @db.Date
  focus     String   @db.VarChar(500)
  projectId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  createdBy String
  updatedBy String?
  project   projects @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([date, projectId])
  @@index([projectId])
}

model supportActivities {
  id                    Int                     @id @default(autoincrement())
  title                 String
  description           String?
  activityType          String                  @default("General")
  duration              Int?
  isActive              Boolean                 @default(true)
  curriculumId          Int
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  createdBy             String?
  updatedBy             String?
  events                events[]
  curriculum            curriculums             @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  training_plan_modules training_plan_modules[]

  @@index([curriculumId])
  @@index([activityType])
}

model toolAccesses {
  id              Int          @id @default(autoincrement())
  tool            String
  toolType        String?
  toolUrl         String?
  toolDescription String?
  username        String?
  accessCode      String?
  participantId   String
  isActive        Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  createdBy       String?
  updatedBy       String?
  participant     participants @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@index([participantId])
  @@index([tool])
}

model event_instructors {
  id           Int         @id @default(autoincrement())
  eventId      Int
  instructorId Int
  role         String      @default("main")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  event        events      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  instructor   instructors @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  @@unique([eventId, instructorId])
  @@index([eventId])
  @@index([instructorId])
}

model course_instructors {
  id           Int         @id @default(autoincrement())
  courseId     Int
  instructorId Int
  role         String      @default("main")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  course       courses     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  instructor   instructors @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  @@unique([courseId, instructorId])
  @@index([courseId])
  @@index([instructorId])
}

model course_checklist_items {
  id                       Int                                           @id @default(autoincrement())
  courseId                 Int
  title                    String
  description              String?
  category                 String                                        @default("general")
  priority                 String                                        @default("medium")
  moduleId                 Int?
  itemOrder                Int?
  participantOnly          Boolean                                       @default(false)
  createdAt                DateTime                                      @default(now())
  updatedAt                DateTime                                      @updatedAt
  createdBy                String?
  updatedBy                String?
  course                   courses                                       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  module                   modules?                                      @relation(fields: [moduleId], references: [id])
  progress                 project_course_checklist_progress[]
  participant_progress     project_participants_course_checklist_progress[]

  @@index([courseId])
  @@index([moduleId])
  @@index([category])
  @@index([priority])
}

model group_curriculums {
  id           Int         @id @default(autoincrement())
  groupId      Int
  curriculumId Int
  isActive     Boolean     @default(true)
  assignedAt   DateTime    @default(now())
  assignedBy   String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdBy    String?
  updatedBy    String?
  curriculum   curriculums @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  group        groups      @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, curriculumId])
  @@index([groupId])
  @@index([curriculumId])
}

model topics {
  id                 Int               @id @default(autoincrement())
  title              String
  description        String?
  color              String?
  icon               String?
  isActive           Boolean           @default(true)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  createdBy          String
  updatedBy          String?
  sub_organizationId Int
  course_topics      course_topics[]
  project_topics     project_topics[]
  sub_organization   sub_organizations @relation(fields: [sub_organizationId], references: [id], onDelete: Cascade)

  @@unique([title, sub_organizationId], name: "unique_topic_per_organization")
  @@index([sub_organizationId])
  @@index([title])
  @@index([isActive])
}

model course_topics {
  id        Int      @id @default(autoincrement())
  courseId  Int
  topicId   Int
  createdAt DateTime @default(now())
  createdBy String?
  course    courses  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  topic     topics   @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([courseId, topicId])
  @@index([courseId])
  @@index([topicId])
}

model course_participant_roles {
  id         Int                               @id @default(autoincrement())
  courseId   Int
  roleId     Int
  isRequired Boolean                           @default(true)
  createdAt  DateTime                          @default(now())
  updatedAt  DateTime                          @updatedAt
  createdBy  String?
  updatedBy  String?
  course     courses                           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  role       sub_organization_participant_role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([courseId, roleId])
  @@index([courseId])
  @@index([roleId])
}

model module_participant_roles {
  id         Int                               @id @default(autoincrement())
  moduleId   Int
  roleId     Int
  isRequired Boolean                           @default(true)
  createdAt  DateTime                          @default(now())
  updatedAt  DateTime                          @updatedAt
  createdBy  String?
  updatedBy  String?
  module     modules                           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  role       sub_organization_participant_role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([moduleId, roleId])
  @@index([moduleId])
  @@index([roleId])
}

model project_course_checklist_progress {
  id              Int                    @id @default(autoincrement())
  projectId       Int
  checklistItemId Int
  completed       Boolean                @default(false)
  completedAt     DateTime?
  completedBy     String?
  notes           String?                @db.VarChar(160)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  createdBy       String?
  checklistItem   course_checklist_items @relation(fields: [checklistItemId], references: [id], onDelete: Cascade)
  project         projects               @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, checklistItemId])
  @@index([projectId])
  @@index([checklistItemId])
  @@index([completed])
}

model project_participants_course_checklist_progress {
  id              Int                    @id @default(autoincrement())
  projectId       Int
  participantId   Int
  checklistItemId Int
  completed       Boolean                @default(false)
  completedAt     DateTime?
  completedBy     String?
  notes           String?                @db.VarChar(500)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  createdBy       String?
  updatedBy       String?
  checklistItem   course_checklist_items @relation(fields: [checklistItemId], references: [id], onDelete: Cascade)
  participant     project_participants   @relation(fields: [participantId], references: [id], onDelete: Cascade)
  project         projects               @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, participantId, checklistItemId], name: "unique_participant_checklist_item")
  @@index([projectId])
  @@index([participantId])
  @@index([checklistItemId])
  @@index([completed])
}

model course_objectives {
  id             Int      @id @default(autoincrement())
  courseId       Int
  objective      String
  objectiveOrder Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String?
  updatedBy      String?
  course         courses  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([objectiveOrder])
}

model module_objectives {
  id             Int      @id @default(autoincrement())
  moduleId       Int
  objective      String
  objectiveOrder Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String?
  updatedBy      String?
  module         modules  @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId])
  @@index([objectiveOrder])
}

model training_plans {
  id           Int                  @id @default(autoincrement())
  curriculumId Int
  projectId    Int?
  title        String
  description  String?
  totalDays    Int                  @default(5)
  status       String               @default("draft")
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  createdBy    String
  updatedBy    String?
  days         training_plan_days[]
  curriculum   curriculums          @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  project      projects?            @relation(fields: [projectId], references: [id])

  @@unique([curriculumId, projectId])
  @@index([curriculumId])
  @@index([projectId])
  @@index([status])
}

model training_plan_days {
  id             Int                     @id @default(autoincrement())
  trainingPlanId Int
  dayNumber      Int
  dayTitle       String?
  dayDescription String?
  date           DateTime?
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  trainingPlan   training_plans          @relation(fields: [trainingPlanId], references: [id], onDelete: Cascade)
  modules        training_plan_modules[]

  @@unique([trainingPlanId, dayNumber])
  @@index([trainingPlanId])
  @@index([dayNumber])
}

model training_plan_modules {
  id                 Int                @id @default(autoincrement())
  trainingPlanDayId  Int
  moduleId           Int?
  courseId           Int?
  supportActivityId  Int?
  customTitle        String?
  customDuration     Int?
  moduleOrder        Int
  activities         Json?
  learningObjectives Json?
  notes              String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  course             courses?           @relation(fields: [courseId], references: [id])
  module             modules?           @relation(fields: [moduleId], references: [id])
  supportActivity    supportActivities? @relation(fields: [supportActivityId], references: [id])
  day                training_plan_days @relation(fields: [trainingPlanDayId], references: [id], onDelete: Cascade)

  @@index([trainingPlanDayId])
  @@index([moduleId])
  @@index([courseId])
  @@index([supportActivityId])
  @@index([moduleOrder])
}

model project_topics {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId Int
  topicId   Int
  project   projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  topic     topics   @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([projectId, topicId], name: "projectId_topicId")
  @@index([projectId])
  @@index([topicId])
}

model event_activity_progress {
  id          Int        @id @default(autoincrement())
  eventId     Int
  activityId  Int
  completed   Boolean    @default(false)
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  event       events     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  activity    activities @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@unique([eventId, activityId])
  @@index([eventId])
  @@index([activityId])
}

model event_module_progress {
  id          Int      @id @default(autoincrement())
  eventId     Int
  moduleId    Int
  completed   Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  event       events   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  module      modules  @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([eventId, moduleId])
  @@index([eventId])
  @@index([moduleId])
}
